{"componentChunkName":"component---src-templates-blog-post-js","path":"/nextjs-reactquery-useinfinitequery/","result":{"data":{"site":{"siteMetadata":{"title":"공자윤의 기술블로그"}},"markdownRemark":{"id":"553ca892-f753-50be-8a67-0948af59f705","excerpt":"Next.js 프로젝트 수행 시 함께 진행하는 중요 과제로 기존의 Redux를 걷어내고 모든 fetch data를 React Query…","html":"<p>Next.js 프로젝트 수행 시 함께 진행하는 중요 과제로 <strong>기존의 Redux를 걷어내고 모든 fetch data를 React Query로 관리하기</strong>가 있습니다.\n<br />\n이번 포스팅에서는 무한스크롤 시 <code class=\"language-text\">react query</code>를 사용해서 데이터를 가져온 과정을 정리해 보겠습니다.</p>\n<p>현재 저는 <code class=\"language-text\">InfiniteScroll</code> 라이브러리를 사용 중입니다. 버튼 대신 스크롤을 내렸을 때 페이징 처리를 쉽게 해 주는 라이브러리인데요, 간단한 사용법은 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>InfiniteScroll hasMore<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hasMore<span class=\"token punctuation\">}</span> loadMore<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>loadMore<span class=\"token punctuation\">}</span> loader<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>loader<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>InfiniteScroll<span class=\"token operator\">></span></code></pre></div>\n<p>여기서 <code class=\"language-text\">hasMore</code>은 데이터가 더 있는지를 판단하는 값이고, <code class=\"language-text\">loadMore</code>은 일반적으로 데이터를 다시 불러오는 <code class=\"language-text\">fetch</code> 역할을 합니다.\n그리고 <code class=\"language-text\">loader</code>는 loading중일 때 return되는 element입니다.</p>\n<p>기존에는 <code class=\"language-text\">redux</code>를 사용하고 있었기 때문에 <code class=\"language-text\">loadMore</code> 호출 시 현재 페이지의 값에서 1을 더하여 데이터를 다시 fetch하고, 받아온 데이터를 <code class=\"language-text\">reducer</code>에서 <code class=\"language-text\">merge</code>하여 return하는 방식을 사용했습니다.\n사실 <code class=\"language-text\">react query</code>도 사용법은 별반 다를 바가 없었으나, 실제로 사용해 보니 <code class=\"language-text\">redux</code>를 사용할 때보다 좀더 편리하게 쓸 수 있는 몇 가지 방법이 있었습니다.</p>\n<h2>useInfiniteQuery</h2>\n<p>기존의 <code class=\"language-text\">useQuery</code> 대신 <code class=\"language-text\">useInfiniteQuery</code>를 사용했습니다. 이 <code class=\"language-text\">hook</code>을 사용하면 <code class=\"language-text\">useQuery</code>에서 return해 주는 <code class=\"language-text\">isLoading</code>, <code class=\"language-text\">data</code>, <code class=\"language-text\">isError</code> 이외에도 몇 가지 기능을 더 가져올 수 있습니다.</p>\n<ul>\n<li><strong><em>fetchNextPage</em></strong>\n<ul>\n<li>다음 페이지의 데이터를 가져옵니다.</li>\n</ul>\n</li>\n<li><strong><em>fetchPreviousPage</em></strong>\n<ul>\n<li>이전 페이지의 데이터를 가져옵니다.</li>\n</ul>\n</li>\n<li><strong><em>hasNextPage</em></strong>\n<ul>\n<li>다음 페이지의 데이터가 있는지의 여부를 리턴합니다.</li>\n</ul>\n</li>\n<li><strong><em>hasPreviousPage</em></strong>\n<ul>\n<li>이전 페이지의 데이터가 있는지의 여부를 리턴합니다.</li>\n</ul>\n</li>\n<li><strong><em>isFetchingNextPage</em></strong>\n<ul>\n<li>다음 페이지의 데이터를 가져오는 중이라는 상태를 리턴합니다.</li>\n</ul>\n</li>\n<li><strong><em>isFetchingPreviousPage</em></strong>\n<ul>\n<li>이전 페이지의 데이터를 가져오는 중이라는 상태를 리턴합니다.</li>\n</ul>\n</li>\n</ul>\n<p>무한스크롤의 경우 이전 페이지로 가는 경우는 없기 때문에 저는 <code class=\"language-text\">fetchNextPage</code>, <code class=\"language-text\">hasNextPage</code>, <code class=\"language-text\">isFetchingNextPage</code> 이 세 가지 리턴값만 사용하였습니다.\n이 값을 <code class=\"language-text\">InfiniteScroll</code>의 prop에 매칭시켜 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>InfiniteScroll hasMore<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hasNextPage<span class=\"token punctuation\">}</span> loadMore<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>fetchNextPage<span class=\"token punctuation\">}</span> loader<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>loader<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>InfiniteScroll<span class=\"token operator\">></span></code></pre></div>\n<h3>pageParam</h3>\n<p>그런데 <code class=\"language-text\">react query</code>에서는 페이지의 값을 넘겨주지도 않았는데 어떻게 페이지 정보를 알고 자동으로 <code class=\"language-text\">fetch</code>를 해주는 걸까요?</p>\n<p><code class=\"language-text\">useInfiniteQuery</code>를 사용하면 두 번째 파라미터인 <code class=\"language-text\">queryFn</code>의 파라미터 값으로 <code class=\"language-text\">pageParam</code>을 받을 수 있습니다.\n<code class=\"language-text\">pageParam</code>은 <code class=\"language-text\">useInfiniteQuery</code>가 현재 어떤 페이지에 있는지 확인할 수 있는 값입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token function\">useInfiniteQuery</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>QueryKey<span class=\"token punctuation\">.</span><span class=\"token constant\">GET_MY_CONTENTS</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> pageParam <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이와 같이 사용할 수 있습니다.</p>\n<h3>getNextPagePram</h3>\n<p><code class=\"language-text\">useInfiniteQuery</code>를 사용할 때 파라미터로 넘기는 값에 <code class=\"language-text\">getNextPageParam</code>라는 옵션이 있습니다. 이 옵션은 데이터를 추가로 fetch하기 위해 지정하는 다음 페이지의 값입니다.</p>\n<p>위 코드에서 다음과 같이 추가해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token function\">useInfiniteQuery</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>QueryKey<span class=\"token punctuation\">.</span><span class=\"token constant\">GET_MY_CONTENTS</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> pageParam <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">getNextPageParam</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> page <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>page<span class=\"token punctuation\">.</span>isEndPage <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span>number <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>기본적으로 리턴하는 값은 <code class=\"language-text\">data.pages</code>이고 page는 V컬러링에서 리턴하는 page object data입니다.\n마지막 페이지가 아닌 경우와 페이지 number가 있는 경우 1씩 더해서 다음 페이지로 넘기도록 해 주는 코드입니다.</p>\n<h3>hasNextPage, fetchNextPage</h3>\n<p>이제 위 코드를 hook으로 만들어 사용해 주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> list<span class=\"token punctuation\">,</span>\n  isLoading<span class=\"token punctuation\">,</span>\n  hasNextPage<span class=\"token punctuation\">,</span>\n  isFetchingNextPage<span class=\"token punctuation\">,</span>\n  fetchNextPage<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMyContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span>InfiniteScroll hasMore<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hasNextPage<span class=\"token punctuation\">}</span> loadMore<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>fetchNextPage<span class=\"token punctuation\">}</span> loader<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>loader<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>InfiniteScroll<span class=\"token operator\">></span></code></pre></div>\n<p>이렇게 호출해 주기만 하면, <code class=\"language-text\">useInfiniteQuery</code>에서 <code class=\"language-text\">getNextPageParam</code>을 기반으로 판단한 <code class=\"language-text\">hasNextPage</code> 값으로 더 fetch를 할지를 결정해 주고,\n따로 다음 페이지의 값을 넘기지 않아도 <code class=\"language-text\">fetchNextPage</code> 값으로 자동으로 페이지 값을 증가시켜서 다음 API를 호출해 줍니다.\n그리고 UI를 그리기 위해서 list를 merge하는 몇 줄의 코드만 더 작성해 주면 구현이 완료됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// useMyContents 전체 코드</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useMyContents</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> VRMy<span class=\"token punctuation\">.</span>IContentsType<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">usable</span><span class=\"token operator\">:</span> VRMy<span class=\"token punctuation\">.</span>IUsableType</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token function\">useInfiniteQuery</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">[</span>QueryKey<span class=\"token punctuation\">.</span><span class=\"token constant\">GET_MY_CONTENTS</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> usable<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> pageParam <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchContents</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> usable<span class=\"token punctuation\">,</span> pageParam<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">staleTime</span><span class=\"token operator\">:</span> <span class=\"token constant\">ONE_HOUR</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">getNextPageParam</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> page <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        page <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>page<span class=\"token punctuation\">.</span>isEndPage <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">.</span>number <span class=\"token operator\">??</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> pages <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token operator\">?.</span>pages\n  <span class=\"token keyword\">const</span> contentsList <span class=\"token operator\">=</span> pages<span class=\"token operator\">?.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">page</span> <span class=\"token operator\">=></span> page<span class=\"token operator\">?.</span>contentsList <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>pages<span class=\"token operator\">?.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> contentsList <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>response<span class=\"token punctuation\">,</span> data <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>이슈</h2>\n<p>잘 동작하는 것은 확인했지만, 네트워크 탭에 들어가 보니 2페이지부터는 API가 두 번씩 호출되는 현상이 발견되었습니다.\n첫 번째 파라미터인 <code class=\"language-text\">queryKey</code>에 페이지 값이 포함되지 않아서 그런 건가 생각이 되어 <code class=\"language-text\">fetchNextPage</code>를 이용할 때 수동으로 page를 넘기고, <code class=\"language-text\">queryKey</code>에 페이지 정보를 넣는 방식으로 변경해 보았으나 여전히 문제는 발생하였습니다.</p>\n<p>이번에는 데이터를 다시 fetch해 올 때 <code class=\"language-text\">queryKey</code>를 완전히 <code class=\"language-text\">invalidate</code>시키고 다시 가져오는 방법도 사용해 보았습니다.\n그리고 이 과정에서, <code class=\"language-text\">useInfiniteQuery</code>의 리턴값 중 <code class=\"language-text\">refetch</code>라는 값이 있다는 것도 알게 되었습니다. <code class=\"language-text\">refetch</code>는 사용하는 시점에 강제로 데이터를 다시 fetch해 오는 역할을 합니다.</p>\n<h3>isFetchingNextPage</h3>\n<p>이런저런 방법으로도 해결이 되지 않아 동료에게 도움을 청해 방법을 찾게 되었습니다.\n바로 <code class=\"language-text\">InfiniteScroll</code>의 <code class=\"language-text\">hasMore</code> 속성에 <code class=\"language-text\">hasNextPage</code>뿐 아니라 <code class=\"language-text\">!isFetchingNextPage</code> 값을 넣어 주지 않았기 때문에 발생한 문제였는데요,\n데이터가 더 있는지 여부를 판단할 때 다음 페이지를 fetching중일 때도 <code class=\"language-text\">hasNextPage</code> 값은 true로 리턴되기 때문에 짧은 시간 안에 API가 한번 더 호출되는 것이었습니다.</p>\n<p>아래와 같이 <code class=\"language-text\">!isFetchingNextPage</code> 조건을 추가하니 문제 없이 깔끔하게 한 번만 호출되는 것을 확인할 수 있었습니다!\n(늘 도움을 주시고 저의 부족한 부분을 채워주시는 kirim님에게 항상 감사드립니다. 😊)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> list<span class=\"token punctuation\">,</span>\n  isLoading<span class=\"token punctuation\">,</span>\n  hasNextPage<span class=\"token punctuation\">,</span>\n  isFetchingNextPage<span class=\"token punctuation\">,</span>\n  fetchNextPage<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMyContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">&lt;</span>InfiniteScroll\n  hasMore<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>hasNextPage <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>isFetchingNextPage<span class=\"token punctuation\">}</span>\n  loadMore<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>fetchNextPage<span class=\"token punctuation\">}</span>\n  loader<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>loader<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>InfiniteScroll<span class=\"token operator\">></span></code></pre></div>\n<p>이렇게 해서 보관함 리스트의 무한 스크롤 기능을 <code class=\"language-text\">useInfiniteQuery</code>를 이용해 성공적으로 구현하였습니다.</p>","frontmatter":{"title":"Next.js 전환 과정 (5) - Infinite scroll 데이터에 react query 적용하기","date":"April 24, 2023","description":"React로 구현된 SPA (CSR) 프로젝트를 Next.js로 전환하는 과정","author":"jayoon"}},"previous":{"fields":{"slug":"/nextjs-refresh-token/"},"frontmatter":{"title":"Next.js 전환 과정 (4) - 자동로그인 (토큰 갱신)"}},"next":null},"pageContext":{"id":"553ca892-f753-50be-8a67-0948af59f705","previousPostId":"fce8c886-0c77-5b29-bc6d-08bb3c08f0f1","nextPostId":null}},"staticQueryHashes":["2841359383"],"slicesMap":{}}