{"version":3,"file":"component---src-templates-blog-post-js-a0782e238033dc661560.js","mappings":"8NAEO,MAAMA,EAAU,CACrBC,OAAQ,CACNC,KAAM,MACNC,KAAM,QACNC,YACE,0BACFC,UCRW,IAA0B,qDDSrCC,KAAM,sBAERC,KAAM,CACJL,KAAM,OACNC,KAAM,QACNC,YACE,eEfN,MAAe,IAA0B,sDC2BzC,MAhBY,IAAiB,IAAhB,OAAEI,GAAQ,EACrB,MAAM,KAAEN,EAAI,YAAEE,EAAW,UAAEC,EAAS,KAAEC,GCTjC,SAAmBJ,GACxB,MAAMO,EAAST,EAAQE,EAAKQ,eAC5B,OAAID,EACK,CACLP,KAASO,EAAOP,KAAI,KAAKO,EAAON,KAAI,IACpCC,YAAaK,EAAOL,YACpBC,UAAWI,EAAOJ,WAAaM,EAC/BL,KAAMG,EAAOH,MAAQ,MAGlB,CACLJ,OACAG,UAAWM,EAEf,CDLiDC,CAAUJ,GACzD,OACE,uBAAKK,UAAU,OACb,uBAAKC,IAAKT,EAAWU,IAAI,UAAUF,UAAU,eAC5CL,GACC,yBACGF,EAAO,gBAAC,EAAAU,KAAI,CAACC,GAAIX,EAAMY,OAAO,UAAS,8BAAShB,IAAwB,8BAASA,GAClF,2BACCE,GAGD,E,oBEhBV,MAwDae,EAAO,IAAyC,IAAtCC,MAAQC,eAAgBC,IAAQ,EACrD,OACE,gBAAC,IAAG,CACFC,MAAOD,EAAKE,YAAYD,MACxBnB,YAAakB,EAAKE,YAAYpB,aAAekB,EAAKG,SAClD,EAIN,MAjEyB,IAGlB,IAAD,MAFJL,MAAM,SAAEM,EAAQ,KAAEC,EAAI,KAAEC,EAAMP,eAAgBC,GAAM,SACpDO,GACD,EACC,MAAMC,GAA6B,QAAjB,EAAAF,EAAKG,oBAAY,aAAjB,EAAmBR,QAAK,QAE1C,OACE,gBAAC,IAAM,CAACM,SAAUA,EAAUN,MAAOO,GACjC,2BACEjB,UAAU,YACVmB,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYZ,EAAKE,YAAYD,OAC1C,yBAAID,EAAKE,YAAYW,OAEvB,2BACEC,wBAAyB,CAAEC,OAAQf,EAAKgB,MACxCJ,SAAS,gBAEX,2BACA,8BACE,gBAAC,EAAG,CAAC1B,OAAQc,EAAKE,YAAYhB,WAGlC,uBAAKK,UAAU,iBACb,sBACE0B,MAAO,CACLC,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGlB,GACC,gBAAC,EAAAV,KAAI,CAACC,GAAIS,EAASmB,OAAOC,KAAMC,IAAI,QAAO,KACtCrB,EAASF,YAAYD,QAI9B,0BACGI,GACC,gBAAC,EAAAX,KAAI,CAACC,GAAIU,EAAKkB,OAAOC,KAAMC,IAAI,QAC7BpB,EAAKH,YAAYD,MAAM,SAM3B,C","sources":["webpack://gatsby-starter-blog/./src/members/index.js","webpack://gatsby-starter-blog/./src/members/images/jayoon.jpg","webpack://gatsby-starter-blog/./src/members/images/default.png","webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/hooks/useAuthor.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import jayoon from \"./images/jayoon.jpg\";\n\nexport const MEMBERS = {\n  jayoon: {\n    name: \"공자윤\",\n    team: \"SK플래닛\",\n    description:\n      \"글쓰기를 좋아하는 프론트엔드 개발자입니다.\",\n    thumbnail: jayoon,\n    link: \"http://jayoon.work\"\n  },\n  cony: {\n    name: \"Cony\",\n    team: \"SK플래닛\",\n    description:\n      \"공자윤의 부캐입니다\"\n  }\n};\n","export default __webpack_public_path__ + \"static/jayoon-d5c764119394a065460a4c01aa4969a5.jpg\";","export default __webpack_public_path__ + \"static/default-21b9d603b7b46df341112559c739afae.png\";","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport { Link } from \"gatsby\";\nimport * as React from \"react\"\nimport { useAuthor } from \"../hooks/useAuthor\";\n\nconst Bio = ({ author }) => {\n  const { name, description, thumbnail, link } = useAuthor(author);\n  return (\n    <div className=\"bio\">\n      <img src={thumbnail} alt=\"profile\" className=\"bio-avatar\" />\n      {author && (\n        <p>\n          {link ? <Link to={link} target=\"_blank\"><strong>{name}</strong></Link> : <strong>{name}</strong>}\n          <br />\n          {description}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import { MEMBERS } from \"../members\";\nimport thumbnailDefault from \"../members/images/default.png\";\n\nexport function useAuthor(name) {\n  const member = MEMBERS[name.toLowerCase()];\n  if (member) {\n    return {\n      name: `${member.name} (${member.team})`,\n      description: member.description,\n      thumbnail: member.thumbnail || thumbnailDefault,\n      link: member.link || null\n    };\n  }\n  return {\n    name,\n    thumbnail: thumbnailDefault\n  };\n}","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h2 itemProp=\"headline\">{post.frontmatter.title}</h2>\n          <p>{post.frontmatter.date}</p>\n        </header>\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <hr />\n        <footer>\n          <Bio author={post.frontmatter.author} />\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n        author\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["MEMBERS","jayoon","name","team","description","thumbnail","link","cony","author","member","toLowerCase","thumbnailDefault","useAuthor","className","src","alt","Link","to","target","Head","data","markdownRemark","post","title","frontmatter","excerpt","previous","next","site","location","siteTitle","siteMetadata","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"sourceRoot":""}